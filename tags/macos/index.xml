<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>MacOS on Nichijou</title>
    <link>https://blog.ningwang.com/tags/macos/</link>
    <description>Recent content in MacOS on Nichijou</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Sun, 27 Sep 2015 20:21:36 +0800</lastBuildDate>
    
	<atom:link href="https://blog.ningwang.com/tags/macos/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>macOS（OS X） 中的 SSH Session 管理</title>
      <link>https://blog.ningwang.com/posts/ssh-session-management-on-macos/</link>
      <pubDate>Sun, 27 Sep 2015 20:21:36 +0800</pubDate>
      
      <guid>https://blog.ningwang.com/posts/ssh-session-management-on-macos/</guid>
      <description>之前一直使用 Windows，所以一直都能用到 XShell 或者 Putty 这样的软件，在登录 SSH 的同时还能管理 SSH Session。切换到 OS X 下却有点蛋疼，虽然 SSH 命令没有 Session 管理的功能，但是略微配置一下就能变的比 Windows 好用不少。
配置完成后可以做到：
 存储 Session 使用 SSH Key 免密码登录 Session 自动补全  存储 Session 编辑 ~/.ssh/config 文件
Host dev HostName example.com User username  详细的选项可以在 /etc/ssh/ssh_config 中查看。现在在 ssh 命令后面直接跟上别名就好了。
使用 SSH Key 免密码登录 SSH Key 分为公钥和私钥，公钥放在被 SSH 的机器上，私钥自己拿着。
ssh-keygen -t rsa 使用上面的命令生成一对密钥，可以自己取名字，建议在 ~/.ssh/ 目录下执行。生成的两个文件中，后缀为pub的就是公钥，有多百种方法可以把公钥放倒服务器上，scp, sftp等等，但是要注意authorized_keys存在与否的区别。也有一键式的命令 ssh-copy-id 来复制 SSH Key
# scp scp public_key username@example.</description>
    </item>
    
  </channel>
</rss>