<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Nichijou</title>
    <link>https://blog.ningwang.com/posts/</link>
    <description>Recent content in Posts on Nichijou</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Fri, 07 Sep 2018 20:53:45 +0800</lastBuildDate>
    
	<atom:link href="https://blog.ningwang.com/posts/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>使用 Alfred 来切换 Network Location 和 Surge Profile</title>
      <link>https://blog.ningwang.com/posts/switching-network-location-and-surge-profile-with-alfred/</link>
      <pubDate>Fri, 07 Sep 2018 20:53:45 +0800</pubDate>
      
      <guid>https://blog.ningwang.com/posts/switching-network-location-and-surge-profile-with-alfred/</guid>
      <description>背景 忍不了公司的 Windows 电脑，所以自购了一台 Mac 带到公司去开发，同时也作为我的个人电脑使用。
几点实事  在公司需要使用公司提供的 PAC；在家里在路由器上搭建了透明代理，本机不需要配置任何代理。 macOS 设置了 PAC 的情况下 Bypass proxy settings 将不再生效。 公司提供的 PAC 行为不如我自己设置的 Rule-based Proxy 来的稳定，开发需要稳定的网络行为。 CLI 的代理设置切换通过 export 环境变量来设置，切换需要重开 iTerm Tab 或者在当前 Tab 内重新 source，并不方便。  解决方案 在公司：不使用公司提供的 PAC，使用 PAC 中的外网代理作为 Surge 的上游代理，设置 Surge 提供的代理为系统代理和 CLI 代理，通过 Surge 来决定请求是否走代理。
在家：系统不设置任何代理，CLI 代理（环境变量）仍然保持使用 Surge 的代理，Surge 的上游代理设置为 Shadowsocks。
  Location System Proxy CLI Proxy Surge Profile   Upstream Rules   Home None Surge Shadowsocks Daily rules   Work Surge Surge HTTP proxy provided by my employer Working rules   上述方法涉及到系统代理设置的切换可以通过 macOS 的 Network Location 功能来实现，并且有现成的 Alfred Workflow 可以使用，但是 Surge 切换则完全需要手动控制，这就忍不了了。所以目标是能够通过 Alfred 来控制 Surge。</description>
    </item>
    
    <item>
      <title>使用 Telegram Bot 和 Tasker 转发短信</title>
      <link>https://blog.ningwang.com/posts/forwarding-sms-with-telegram-bot-and-tasker/</link>
      <pubDate>Wed, 20 Jun 2018 20:53:45 +0800</pubDate>
      
      <guid>https://blog.ningwang.com/posts/forwarding-sms-with-telegram-bot-and-tasker/</guid>
      <description>要求：
 接收短信的设备必须是 Android 设备 需要购买 Tasker 接收短信的设备能正常访问 Telegram Bot API  主要分为以下几步：
 新建和使用 Telegram Bot  建立一个 Telegram Bot，获得 Telegram Bot Token 调用 API  配置 Tasker 来转发短信  在 Tasker 中配置 Profile 为该 Profile 配置对应的 Task 调试   新建和使用 Telegram Bot 建立一个 Telegram Bot，获得 Telegram Bot Token 参考 Telegram Bot 的文档，新建一个 Bot，并获得 Token。
调用 API 参考 Telegram Bot API 文档中关于鉴权的描述，调用任何 API 的格式都是 https://api.telegram.org/bot&amp;lt;token&amp;gt;/METHOD_NAME，同时接受 HTTP GET 和 HTTP POST。</description>
    </item>
    
    <item>
      <title>macOS 中的 SSH Session 管理</title>
      <link>https://blog.ningwang.com/posts/ssh-session-management-on-macos/</link>
      <pubDate>Sun, 27 Sep 2015 20:21:36 +0800</pubDate>
      
      <guid>https://blog.ningwang.com/posts/ssh-session-management-on-macos/</guid>
      <description>之前一直使用 Windows，所以一直都能用到 XShell 或者 Putty 这样的软件，在登录 SSH 的同时还能管理 SSH Session。切换到 macOS 下却有点蛋疼，虽然 SSH 命令没有 Session 管理的功能，但是略微配置一下就能变的比 Windows 好用不少。
配置完成后可以做到：
 存储 Session 使用 SSH Key 免密码登录 Session 自动补全  存储 Session 编辑 ~/.ssh/config 文件
Host dev HostName example.com User username  详细的选项可以在 /etc/ssh/ssh_config 中查看。现在在 ssh 命令后面直接跟上别名就好了。
使用 SSH Key 免密码登录 SSH Key 分为公钥和私钥，公钥放在被 SSH 的机器上，私钥自己拿着。
ssh-keygen -t rsa 使用上面的命令生成一对密钥，可以自己取名字，建议在 ~/.ssh/ 目录下执行。生成的两个文件中，后缀为pub的就是公钥，有多百种方法可以把公钥放倒服务器上，scp, sftp等等，但是要注意authorized_keys存在与否的区别。也有一键式的命令 ssh-copy-id 来复制 SSH Key
# scp scp public_key username@example.</description>
    </item>
    
  </channel>
</rss>